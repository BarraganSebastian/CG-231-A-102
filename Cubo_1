<!DOCTYPE html>
<html>
    <head>
        <title>Titulo</title>
        <style>
            html, body { margin: 0; padding: 0; overflow: hidden; }
            #text {
                position: absolute;
                padding: 10px;
                width: 100%;
                text-align: center;
                color: #FFFFFF;
            }
        </style>
    </head>
    <body>
        <div id="text">TALLER_1<br/>
            Sebastian Barragan<br/>
            Cubo<br/>
        </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r94/three.min.js"></script>
    <script>

    function init() {

        // Escena
        scene = new THREE.Scene();
        camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);    
        renderer = new THREE.WebGLRenderer();
        renderer.setClearColor(0x000000, 1.0);
        renderer.setSize(window.innerWidth, window.innerHeight);

        var size = 700;
        var arrowSize = 40;
        var divisions = 20;
        var origin = new THREE.Vector3( 0, 0, 0 );
        var x = new THREE.Vector3( 1, 0, 0 );
        var y = new THREE.Vector3( 0, 1, 0 );
        var z = new THREE.Vector3( 0, 0, 1 );
        var color2 = new THREE.Color( 0x333333 );  /// 0x333333
        var colorR = new THREE.Color( 0xAA0000 );
        var colorG = new THREE.Color( 0x00AA00 );
        var colorB = new THREE.Color( 0x0000AA );

        //Crear la Grilla
        var gridHelperXZ = new THREE.GridHelper( size, divisions, color2, color2);

        //Flechas
        var arrowX = new THREE.ArrowHelper( x, origin, arrowSize, colorR );
        var arrowY = new THREE.ArrowHelper( y, origin, arrowSize, colorG );
        var arrowZ = new THREE.ArrowHelper( z, origin, arrowSize, colorB );
			
        //Cámara
        camera.position.x = 150;
        camera.position.y = 125;
        camera.position.z = 175;
        camera.lookAt(scene.position);

        //Creación de las Figuras
        //Cuadrado
        Geometria=new THREE.Geometry();
        var vertices = [[0,0,0], [50,0,0], [50,50,0], [0,50,0], [0,0,0]];
        var largoVertice = vertices.length;
        for (i = 0; i < largoVertice; i++) {
            x = vertices[i][0];
            y = vertices[i][1];
            z = vertices[i][2];
            vector = new THREE.Vector3(x, y, z);
            Geometria.vertices.push(vector);
        }

        // Cuadrado Modificado
        Geometria2=new THREE.Geometry();
        var vertices = [[0,0,0], [50,0,0], [50,50,0], [0,50,0], [0,0,0]];
        var largoVertice = vertices.length;
        for (i = 0; i < largoVertice; i++){
            x = vertices[i][0];
            y = vertices[i][1];
            z = vertices[i][2];
            vector = new THREE.Vector3(x, y, z);
            Geometria2.vertices.push(vector);
        }

        // Colores
        Material=new THREE.ParticleBasicMaterial({color:0xFF0000});
        Material2=new THREE.ParticleBasicMaterial({color:0x00ff00});
        Material3=new THREE.ParticleBasicMaterial({color:0xff00ff});
        Material4=new THREE.ParticleBasicMaterial({color:0xffff00});
        Material5=new THREE.ParticleBasicMaterial({color:0xffffff});
        Material6=new THREE.ParticleBasicMaterial({color:0x0000ff});


        //Creacion de caras
        Cuadrado = new THREE.Line(Geometria,Material);
        Cuadrado2 = new THREE.Line(Geometria,Material2);
        Cuadrado3= new THREE.Line(Geometria,Material3);
        Cuadrado4= new THREE.Line(Geometria,Material4);
        Cuadrado5= new THREE.Line(Geometria,Material5);
        Cuadrado6= new THREE.Line(Geometria,Material6);

        // Definir una funcion de traslacion
        function traslate(cuadro, dis){
        var matrizT = new THREE.Matrix4();
        matrizT.set(1, 0, 0, dis[0],
                    0, 1, 0, dis[1],
                    0, 0, 1, dis[2],
                    0, 0, 0, 1);

                cuadro.applyMatrix(matrizT);   
                return(cuadro);
    }      

        // Matriz de Escala
        var matrizS = new THREE.Matrix4();
        matrizS.set(1, 0, 0, 0,
                    0, 1, 0, 0,
                    0, 0, 1, 0,
                    0, 0, 0, 1);

                //Cuadrado2.applyMatrix(matrizS);

        // Definir una funcion de rotacion
        function rotacion(cuadro, angulo, eje){
        var matrizR = new THREE.Matrix4();
        var alpha = (angulo*Math.PI)/180;
        var cs = Math.cos(alpha);
		var ss = Math.sin(alpha);
        if(eje=='x'){
            matrizR.set(  1,  0,  0, 0,
        		          0, cs,-ss, 0, 
				          0, ss, cs, 0,
				          0,  0,  0, 1);	

                cuadro.applyMatrix(matrizR);
                return(cuadro);

        }else
            if(eje=='y'){
            matrizR.set( cs,  0, ss, 0,
        		          0,  1,  0, 0, 
				        -ss,  0, cs, 0,
				          0,  0,  0, 1);	

                cuadro.applyMatrix(matrizR);
                return(cuadro);
            }else{
            matrizR.set( cs,-ss,  0, 0,
        		         ss, cs,  0, 0, 
				          0,  0,  1, 0,
				          0,  0,  0, 1);	

                cuadro.applyMatrix(matrizR);
                return(cuadro);
        }}

        
        // En el documento HTML
        document.body.appendChild(renderer.domElement);

        //Rotar y trasladar las caras del cubo
        Cuadrado2=rotacion(Cuadrado2, -90, 'y');
        Cuadrado3=rotacion(Cuadrado3, 90, 'x');
        Cuadrado4=rotacion(Cuadrado4,90,'x');
        Cuadrado4=traslate(Cuadrado4,[0,50,0]);
        Cuadrado5=rotacion(Cuadrado5,-90,'y');
        Cuadrado5=traslate(Cuadrado5,[50,0,0]);
        Cuadrado6=traslate(Cuadrado6,[0,0,50]);

        // Agregar elementos al escenario
        scene.add(gridHelperXZ);
        scene.add(Cuadrado);
        scene.add(Cuadrado2);
        scene.add(Cuadrado3);
        scene.add(Cuadrado4);
        scene.add(Cuadrado5);
        scene.add(Cuadrado6);

        

        renderer.render(scene, camera);
    }

    init();  // otra forma: window.onload = init;

    </script>
  </body>
</html>

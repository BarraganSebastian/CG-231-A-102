<!DOCTYPE html>
<html>
    <head>
        <title>Titulo</title>
        <style>
            html, body { margin: 0; padding: 0; overflow: hidden; }
            #text {
                position: absolute;
                padding: 10px;
                width: 100%;
                text-align: center;
                color: #FFFFFF;
            }
        </style>
    </head>
    <body>
        <div id="text">Titulo<br/>
            Subtitulo<br/>
            Descripción<br/>
        </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r94/three.min.js"></script>
    <script>

    function init() {

        // Escena
        scene = new THREE.Scene();
        camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);    
        renderer = new THREE.WebGLRenderer();
        renderer.setClearColor(0x000000, 1.0);
        renderer.setSize(window.innerWidth, window.innerHeight);

        var size = 700;
        var arrowSize = 40;
        var divisions = 20;
        var origin = new THREE.Vector3( 0, 0, 0 );
        var x = new THREE.Vector3( 1, 0, 0 );
        var y = new THREE.Vector3( 0, 1, 0 );
        var z = new THREE.Vector3( 0, 0, 1 );
        var color2 = new THREE.Color( 0x333333 );  /// 0x333333
        var colorR = new THREE.Color( 0xAA0000 );
        var colorG = new THREE.Color( 0x00AA00 );
        var colorB = new THREE.Color( 0x0000AA );

        //Crear la Grilla
        var gridHelperXZ = new THREE.GridHelper( size, divisions, color2, color2);

        //Flechas
        var arrowX = new THREE.ArrowHelper( x, origin, arrowSize, colorR );
        var arrowY = new THREE.ArrowHelper( y, origin, arrowSize, colorG );
        var arrowZ = new THREE.ArrowHelper( z, origin, arrowSize, colorB );
            
        //Cámara
        camera.position.x = 250;
        camera.position.y = 225;
        camera.position.z = 275;
        camera.lookAt(scene.position);

        //Creación de las Figuras
        //Cuadrado
        Geometria=new THREE.Geometry();
        var vertices = [[0,0,0], [50,0,0], [50,50,0], [0,50,0], [0,0,0]];
        var largoVertice = vertices.length;
        for (i = 0; i < largoVertice; i++) {
            x = vertices[i][0];
            y = vertices[i][1];
            z = vertices[i][2];
            vector = new THREE.Vector3(x, y, z);
            Geometria.vertices.push(vector);
        }

        // Cuadrado Modificado
        Geometria2=new THREE.Geometry();
        var vertices = [[0,0,0], [50,0,0], [50,50,0], [0,50,0], [0,0,0]];
        var largoVertice = vertices.length;
        for (i = 0; i < largoVertice; i++){
            x = vertices[i][0];
            y = vertices[i][1];
            z = vertices[i][2];
            vector = new THREE.Vector3(x, y, z);
            Geometria2.vertices.push(vector);
        }

        // Colores
        Material=new THREE.ParticleBasicMaterial({color:0xFF0000});
        Material2=new THREE.ParticleBasicMaterial({color:0x00ff00});
        Material3=new THREE.ParticleBasicMaterial({color:0x0000FF});
        Material4=new THREE.ParticleBasicMaterial({color:0xFF00FF});
        


        //Creacion de caras cubo original
        CuadOr1 = new THREE.Line(Geometria,Material);
        CuadOr2= new THREE.Line(Geometria,Material);
        CuadOr3= new THREE.Line(Geometria,Material);
        CuadOr4= new THREE.Line(Geometria,Material);
        CuadOr5= new THREE.Line(Geometria,Material);
        CuadOr6= new THREE.Line(Geometria,Material);

	//Creacion de caras cubo traladado
	CuadTr1= new THREE.Line(Geometria,Material2);
	CuadTr2= new THREE.Line(Geometria,Material2);
	CuadTr3= new THREE.Line(Geometria,Material2);
	CuadTr4= new THREE.Line(Geometria,Material2);
	CuadTr5= new THREE.Line(Geometria,Material2);
	CuadTr6= new THREE.Line(Geometria,Material2);

	//Creacion de caras cubo rotado
	CuadRo1= new THREE.Line(Geometria,Material3);
	CuadRo2= new THREE.Line(Geometria,Material3);
	CuadRo3= new THREE.Line(Geometria,Material3);
	CuadRo4= new THREE.Line(Geometria,Material3);
	CuadRo5= new THREE.Line(Geometria,Material3);
	CuadRo6= new THREE.Line(Geometria,Material3);

	//Creacion de caras cubo escalado
	CuadEs1= new THREE.Line(Geometria,Material4);
	CuadEs2= new THREE.Line(Geometria,Material4);
	CuadEs3= new THREE.Line(Geometria,Material4);
	CuadEs4= new THREE.Line(Geometria,Material4);
	CuadEs5= new THREE.Line(Geometria,Material4);
	CuadEs6= new THREE.Line(Geometria,Material4);


        // Definir una funcion de traslacion
        function traslate(cuadro, dis){
        var matrizT = new THREE.Matrix4();
        matrizT.set(1, 0, 0, dis[0],
                    0, 1, 0, dis[1],
                    0, 0, 1, dis[2],
                    0, 0, 0, 1);

                cuadro.applyMatrix(matrizT);   
                return(cuadro);
    }      

        // Definir una funcion de escalado
	function escalado(cuadro, esc){
        var matrizS = new THREE.Matrix4();
        matrizS.set(esc[0], 0, 0, 0,
                    0, esc[1], 0, 0,
                    0, 0, esc[2], 0,
                    0, 0, 0, 1);

                cuadro.applyMatrix(matrizS);
		return(cuadro);
	}

        // Definir una funcion de rotacion
        function rotacion(cuadro, angulo, eje){
        var matrizR = new THREE.Matrix4();
        var alpha = (angulo*Math.PI)/180;
        var cs = Math.cos(alpha);
        var ss = Math.sin(alpha);
        if(eje=='x'){
            matrizR.set(  1,  0,  0, 0,
                          0, cs,-ss, 0, 
                          0, ss, cs, 0,
                          0,  0,  0, 1);    

                cuadro.applyMatrix(matrizR);
                return(cuadro);

        }else
            if(eje=='y'){
            matrizR.set( cs,  0, ss, 0,
                          0,  1,  0, 0, 
                        -ss,  0, cs, 0,
                          0,  0,  0, 1);    

                cuadro.applyMatrix(matrizR);
                return(cuadro);
            }else{
            matrizR.set( cs,-ss,  0, 0,
                         ss, cs,  0, 0, 
                          0,  0,  1, 0,
                          0,  0,  0, 1);    

                cuadro.applyMatrix(matrizR);
                return(cuadro);
        }}

        
        // En el documento HTML
        document.body.appendChild(renderer.domElement);

        //Crear el cubo original
        CuadOr2=rotacion(CuadOr2, -90, 'y');
        CuadOr3=rotacion(CuadOr3, 90, 'x');
        CuadOr4=rotacion(CuadOr4,90,'x');
        CuadOr4=traslate(CuadOr4,[0,50,0]);
        CuadOr5=rotacion(CuadOr5,-90,'y');
        CuadOr5=traslate(CuadOr5,[50,0,0]);
        CuadOr6=traslate(CuadOr6,[0,0,50]);

	//Crear el cubo trasladado
	CuadTr2=rotacion(CuadTr2, -90, 'y');
        CuadTr3=rotacion(CuadTr3, 90, 'x');
        CuadTr4=rotacion(CuadTr4,90,'x');
        CuadTr4=traslate(CuadTr4,[0,50,0]);
        CuadTr5=rotacion(CuadTr5,-90,'y');
        CuadTr5=traslate(CuadTr5,[50,0,0]);
        CuadTr6=traslate(CuadTr6,[0,0,50]);
	CuadTr1=traslate(CuadTr1, [100,0,0]);
	CuadTr2=traslate(CuadTr2, [100,0,0]);
	CuadTr3=traslate(CuadTr3, [100,0,0]);
	CuadTr4=traslate(CuadTr4, [100,0,0]);
	CuadTr5=traslate(CuadTr5, [100,0,0]);
	CuadTr6=traslate(CuadTr6, [100,0,0]);

	//Crear el cubo escalado
	CuadEs2=rotacion(CuadEs2, -90, 'y');
        CuadEs3=rotacion(CuadEs3, 90, 'x');
        CuadEs4=rotacion(CuadEs4,90,'x');
        CuadEs4=traslate(CuadEs4,[0,50,0]);
        CuadEs5=rotacion(CuadEs5,-90,'y');
        CuadEs5=traslate(CuadEs5,[50,0,0]);
        CuadEs6=traslate(CuadEs6,[0,0,50]);
	CuadEs1=escalado(CuadEs1,[1.5,1.5,1.5]);
	CuadEs2=escalado(CuadEs2,[1.5,1.5,1.5]);
	CuadEs3=escalado(CuadEs3,[1.5,1.5,1.5]);
	CuadEs4=escalado(CuadEs4,[1.5,1.5,1.5]);
	CuadEs5=escalado(CuadEs5,[1.5,1.5,1.5]);
	CuadEs6=escalado(CuadEs6,[1.5,1.5,1.5]);

	//Crear el cubo rotado
	CuadRo2=rotacion(CuadRo2, -90, 'y');
        CuadRo3=rotacion(CuadRo3, 90, 'x');
        CuadRo4=rotacion(CuadRo4,90,'x');
        CuadRo4=traslate(CuadRo4,[0,50,0]);
        CuadRo5=rotacion(CuadRo5,-90,'y');
        CuadRo5=traslate(CuadRo5,[50,0,0]);
        CuadRo6=traslate(CuadRo6,[0,0,50]);
	CuadRo1=rotacion(CuadRo1,45,'x');
	CuadRo2=rotacion(CuadRo2,45,'x');
	CuadRo3=rotacion(CuadRo3,45,'x');
	CuadRo4=rotacion(CuadRo4,45,'x');
	CuadRo5=rotacion(CuadRo5,45,'x');
	CuadRo6=rotacion(CuadRo6,45,'x');

        // Agregar elementos al escenario
        scene.add(gridHelperXZ);
        scene.add(CuadOr1);
        scene.add(CuadOr2);
        scene.add(CuadOr3);
        scene.add(CuadOr4);
        scene.add(CuadOr5);
        scene.add(CuadOr6);
	scene.add(CuadTr1);
	scene.add(CuadTr2);
	scene.add(CuadTr3);
	scene.add(CuadTr4);
	scene.add(CuadTr5);
	scene.add(CuadTr6);
	scene.add(CuadEs1);
	scene.add(CuadEs2);
	scene.add(CuadEs3);
	scene.add(CuadEs4);
	scene.add(CuadEs5);
	scene.add(CuadEs6);
	scene.add(CuadRo1);
	scene.add(CuadRo2);
	scene.add(CuadRo3);
	scene.add(CuadRo4);
	scene.add(CuadRo5);
	scene.add(CuadRo6);
        

        renderer.render(scene, camera);
    }

    init();  // otra forma: window.onload = init;

    </script>
  </body>
</html>
